// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: proto/urd/types/block.proto

package types

import (
	hotstuff "emulator/proto/core/hotstuff"
	merkle "emulator/proto/crypto/merkle"
	third_party "emulator/proto/third_party"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommitIntention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntentionHash        [][]byte                   `protobuf:"bytes,1,rep,name=intention_hash,json=intentionHash,proto3" json:"intention_hash,omitempty"`
	AggregatedSignatures []*hotstuff.AggregatedVote `protobuf:"bytes,2,rep,name=aggregated_signatures,json=aggregatedSignatures,proto3" json:"aggregated_signatures,omitempty"`
}

func (x *CommitIntention) Reset() {
	*x = CommitIntention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_urd_types_block_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitIntention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitIntention) ProtoMessage() {}

func (x *CommitIntention) ProtoReflect() protoreflect.Message {
	mi := &file_proto_urd_types_block_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitIntention.ProtoReflect.Descriptor instead.
func (*CommitIntention) Descriptor() ([]byte, []int) {
	return file_proto_urd_types_block_proto_rawDescGZIP(), []int{0}
}

func (x *CommitIntention) GetIntentionHash() [][]byte {
	if x != nil {
		return x.IntentionHash
	}
	return nil
}

func (x *CommitIntention) GetAggregatedSignatures() []*hotstuff.AggregatedVote {
	if x != nil {
		return x.AggregatedSignatures
	}
	return nil
}

type ProofOfIntention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntentionHashProof *merkle.Proof `protobuf:"bytes,1,opt,name=intention_hash_proof,json=intentionHashProof,proto3" json:"intention_hash_proof,omitempty"`
	RightHash          []byte        `protobuf:"bytes,2,opt,name=right_hash,json=rightHash,proto3" json:"right_hash,omitempty"`
}

func (x *ProofOfIntention) Reset() {
	*x = ProofOfIntention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_urd_types_block_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofOfIntention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOfIntention) ProtoMessage() {}

func (x *ProofOfIntention) ProtoReflect() protoreflect.Message {
	mi := &file_proto_urd_types_block_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOfIntention.ProtoReflect.Descriptor instead.
func (*ProofOfIntention) Descriptor() ([]byte, []int) {
	return file_proto_urd_types_block_proto_rawDescGZIP(), []int{1}
}

func (x *ProofOfIntention) GetIntentionHashProof() *merkle.Proof {
	if x != nil {
		return x.IntentionHashProof
	}
	return nil
}

func (x *ProofOfIntention) GetRightHash() []byte {
	if x != nil {
		return x.RightHash
	}
	return nil
}

type CommitCertificateCore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash           []byte            `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	MKProof        *ProofOfIntention `protobuf:"bytes,2,opt,name=m_k_proof,json=mKProof,proto3" json:"m_k_proof,omitempty"`
	IntentionBrief [][]byte          `protobuf:"bytes,3,rep,name=intention_brief,json=intentionBrief,proto3" json:"intention_brief,omitempty"`
}

func (x *CommitCertificateCore) Reset() {
	*x = CommitCertificateCore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_urd_types_block_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitCertificateCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitCertificateCore) ProtoMessage() {}

func (x *CommitCertificateCore) ProtoReflect() protoreflect.Message {
	mi := &file_proto_urd_types_block_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitCertificateCore.ProtoReflect.Descriptor instead.
func (*CommitCertificateCore) Descriptor() ([]byte, []int) {
	return file_proto_urd_types_block_proto_rawDescGZIP(), []int{2}
}

func (x *CommitCertificateCore) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *CommitCertificateCore) GetMKProof() *ProofOfIntention {
	if x != nil {
		return x.MKProof
	}
	return nil
}

func (x *CommitCertificateCore) GetIntentionBrief() [][]byte {
	if x != nil {
		return x.IntentionBrief
	}
	return nil
}

type CommitCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cores []*CommitCertificateCore `protobuf:"bytes,1,rep,name=cores,proto3" json:"cores,omitempty"`
}

func (x *CommitCertificate) Reset() {
	*x = CommitCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_urd_types_block_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitCertificate) ProtoMessage() {}

func (x *CommitCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_urd_types_block_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitCertificate.ProtoReflect.Descriptor instead.
func (*CommitCertificate) Descriptor() ([]byte, []int) {
	return file_proto_urd_types_block_proto_rawDescGZIP(), []int{3}
}

func (x *CommitCertificate) GetCores() []*CommitCertificateCore {
	if x != nil {
		return x.Cores
	}
	return nil
}

type OutputTxsProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockProof *merkle.Proof `protobuf:"bytes,1,opt,name=block_proof,json=blockProof,proto3" json:"block_proof,omitempty"`
	OPTProof   *merkle.Proof `protobuf:"bytes,2,opt,name=OPT_proof,json=OPTProof,proto3" json:"OPT_proof,omitempty"`
}

func (x *OutputTxsProof) Reset() {
	*x = OutputTxsProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_urd_types_block_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputTxsProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputTxsProof) ProtoMessage() {}

func (x *OutputTxsProof) ProtoReflect() protoreflect.Message {
	mi := &file_proto_urd_types_block_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputTxsProof.ProtoReflect.Descriptor instead.
func (*OutputTxsProof) Descriptor() ([]byte, []int) {
	return file_proto_urd_types_block_proto_rawDescGZIP(), []int{4}
}

func (x *OutputTxsProof) GetBlockProof() *merkle.Proof {
	if x != nil {
		return x.BlockProof
	}
	return nil
}

func (x *OutputTxsProof) GetOPTProof() *merkle.Proof {
	if x != nil {
		return x.OPTProof
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashPointer           []byte                 `protobuf:"bytes,1,opt,name=hash_pointer,json=hashPointer,proto3" json:"hash_pointer,omitempty"`
	ChainID               string                 `protobuf:"bytes,2,opt,name=chain_i_d,json=chainID,proto3" json:"chain_i_d,omitempty"`
	View                  int64                  `protobuf:"varint,3,opt,name=view,proto3" json:"view,omitempty"`
	Round                 int32                  `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	Time                  *third_party.Timestamp `protobuf:"bytes,5,opt,name=Time,proto3" json:"Time,omitempty"`
	PrepareRoot           []byte                 `protobuf:"bytes,6,opt,name=prepare_root,json=prepareRoot,proto3" json:"prepare_root,omitempty"`
	OutputTxsRoot         []byte                 `protobuf:"bytes,7,opt,name=output_txs_root,json=outputTxsRoot,proto3" json:"output_txs_root,omitempty"`
	LastAggSigRoot        []byte                 `protobuf:"bytes,8,opt,name=last_agg_sig_root,json=lastAggSigRoot,proto3" json:"last_agg_sig_root,omitempty"`
	CommitIntentionRoot   []byte                 `protobuf:"bytes,9,opt,name=commit_intention_root,json=commitIntentionRoot,proto3" json:"commit_intention_root,omitempty"`
	CommitCertificateRoot []byte                 `protobuf:"bytes,10,opt,name=commit_certificate_root,json=commitCertificateRoot,proto3" json:"commit_certificate_root,omitempty"`
	CommitTxsRoot         []byte                 `protobuf:"bytes,11,opt,name=commit_txs_root,json=commitTxsRoot,proto3" json:"commit_txs_root,omitempty"`
	StateRoot             []byte                 `protobuf:"bytes,12,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_urd_types_block_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_proto_urd_types_block_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_proto_urd_types_block_proto_rawDescGZIP(), []int{5}
}

func (x *Header) GetHashPointer() []byte {
	if x != nil {
		return x.HashPointer
	}
	return nil
}

func (x *Header) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

func (x *Header) GetView() int64 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *Header) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Header) GetTime() *third_party.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Header) GetPrepareRoot() []byte {
	if x != nil {
		return x.PrepareRoot
	}
	return nil
}

func (x *Header) GetOutputTxsRoot() []byte {
	if x != nil {
		return x.OutputTxsRoot
	}
	return nil
}

func (x *Header) GetLastAggSigRoot() []byte {
	if x != nil {
		return x.LastAggSigRoot
	}
	return nil
}

func (x *Header) GetCommitIntentionRoot() []byte {
	if x != nil {
		return x.CommitIntentionRoot
	}
	return nil
}

func (x *Header) GetCommitCertificateRoot() []byte {
	if x != nil {
		return x.CommitCertificateRoot
	}
	return nil
}

func (x *Header) GetCommitTxsRoot() []byte {
	if x != nil {
		return x.CommitTxsRoot
	}
	return nil
}

func (x *Header) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *Header                  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	PrepareTxs    *Txs                     `protobuf:"bytes,2,opt,name=prepare_txs,json=prepareTxs,proto3" json:"prepare_txs,omitempty"`
	OPT           [][]byte                 `protobuf:"bytes,3,rep,name=o_p_t,json=oPT,proto3" json:"o_p_t,omitempty"`
	AggSigVote    *hotstuff.AggregatedVote `protobuf:"bytes,4,opt,name=agg_sig_vote,json=aggSigVote,proto3" json:"agg_sig_vote,omitempty"`
	CI            *CommitIntention         `protobuf:"bytes,5,opt,name=c_i,json=cI,proto3" json:"c_i,omitempty"`
	CC            *CommitCertificate       `protobuf:"bytes,6,opt,name=c_c,json=cC,proto3" json:"c_c,omitempty"`
	CTXS          []*Txs                   `protobuf:"bytes,7,rep,name=c_t_x_s,json=cTXS,proto3" json:"c_t_x_s,omitempty"`
	CTXSProof     []*OutputTxsProof        `protobuf:"bytes,8,rep,name=c_t_x_s_proof,json=cTXSProof,proto3" json:"c_t_x_s_proof,omitempty"`
	CrossShardTxs *Txs                     `protobuf:"bytes,9,opt,name=cross_shard_txs,json=crossShardTxs,proto3" json:"cross_shard_txs,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_urd_types_block_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_proto_urd_types_block_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_proto_urd_types_block_proto_rawDescGZIP(), []int{6}
}

func (x *Block) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetPrepareTxs() *Txs {
	if x != nil {
		return x.PrepareTxs
	}
	return nil
}

func (x *Block) GetOPT() [][]byte {
	if x != nil {
		return x.OPT
	}
	return nil
}

func (x *Block) GetAggSigVote() *hotstuff.AggregatedVote {
	if x != nil {
		return x.AggSigVote
	}
	return nil
}

func (x *Block) GetCI() *CommitIntention {
	if x != nil {
		return x.CI
	}
	return nil
}

func (x *Block) GetCC() *CommitCertificate {
	if x != nil {
		return x.CC
	}
	return nil
}

func (x *Block) GetCTXS() []*Txs {
	if x != nil {
		return x.CTXS
	}
	return nil
}

func (x *Block) GetCTXSProof() []*OutputTxsProof {
	if x != nil {
		return x.CTXSProof
	}
	return nil
}

func (x *Block) GetCrossShardTxs() *Txs {
	if x != nil {
		return x.CrossShardTxs
	}
	return nil
}

type Txs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs [][]byte `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (x *Txs) Reset() {
	*x = Txs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_urd_types_block_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Txs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Txs) ProtoMessage() {}

func (x *Txs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_urd_types_block_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Txs.ProtoReflect.Descriptor instead.
func (*Txs) Descriptor() ([]byte, []int) {
	return file_proto_urd_types_block_proto_rawDescGZIP(), []int{7}
}

func (x *Txs) GetTxs() [][]byte {
	if x != nil {
		return x.Txs
	}
	return nil
}

type CrossShardMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceChain      string                   `protobuf:"bytes,1,opt,name=source_chain,json=sourceChain,proto3" json:"source_chain,omitempty"`
	AggVote          *hotstuff.AggregatedVote `protobuf:"bytes,2,opt,name=agg_vote,json=aggVote,proto3" json:"agg_vote,omitempty"`
	IntentionBrief   [][]byte                 `protobuf:"bytes,3,rep,name=intention_brief,json=intentionBrief,proto3" json:"intention_brief,omitempty"`
	ProofOfIntention *ProofOfIntention        `protobuf:"bytes,4,opt,name=proof_of_intention,json=proofOfIntention,proto3" json:"proof_of_intention,omitempty"`
	OPTTxs           *Txs                     `protobuf:"bytes,5,opt,name=OPT_txs,json=OPTTxs,proto3" json:"OPT_txs,omitempty"`
	OutputTxsProof   *OutputTxsProof          `protobuf:"bytes,6,opt,name=output_txs_proof,json=outputTxsProof,proto3" json:"output_txs_proof,omitempty"`
}

func (x *CrossShardMessage) Reset() {
	*x = CrossShardMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_urd_types_block_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossShardMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossShardMessage) ProtoMessage() {}

func (x *CrossShardMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_urd_types_block_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossShardMessage.ProtoReflect.Descriptor instead.
func (*CrossShardMessage) Descriptor() ([]byte, []int) {
	return file_proto_urd_types_block_proto_rawDescGZIP(), []int{8}
}

func (x *CrossShardMessage) GetSourceChain() string {
	if x != nil {
		return x.SourceChain
	}
	return ""
}

func (x *CrossShardMessage) GetAggVote() *hotstuff.AggregatedVote {
	if x != nil {
		return x.AggVote
	}
	return nil
}

func (x *CrossShardMessage) GetIntentionBrief() [][]byte {
	if x != nil {
		return x.IntentionBrief
	}
	return nil
}

func (x *CrossShardMessage) GetProofOfIntention() *ProofOfIntention {
	if x != nil {
		return x.ProofOfIntention
	}
	return nil
}

func (x *CrossShardMessage) GetOPTTxs() *Txs {
	if x != nil {
		return x.OPTTxs
	}
	return nil
}

func (x *CrossShardMessage) GetOutputTxsProof() *OutputTxsProof {
	if x != nil {
		return x.OutputTxsProof
	}
	return nil
}

var File_proto_urd_types_block_proto protoreflect.FileDescriptor

var file_proto_urd_types_block_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x72, 0x64, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x75,
	0x72, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x68, 0x6f, 0x74, 0x73, 0x74, 0x75, 0x66, 0x66, 0x2f, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x01,
	0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x52, 0x0a, 0x15, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x68,
	0x6f, 0x74, 0x73, 0x74, 0x75, 0x66, 0x66, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x10,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x72,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x37, 0x0a, 0x09, 0x6d, 0x5f, 0x6b, 0x5f, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x72, 0x64, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x4b, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x72, 0x69, 0x65,
	0x66, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x72, 0x69, 0x65, 0x66, 0x22, 0x4b, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x05,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x72,
	0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x78,
	0x73, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x35, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x31, 0x0a,
	0x09, 0x4f, 0x50, 0x54, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x08, 0x4f, 0x50, 0x54, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x22, 0xca, 0x03, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x5f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x74, 0x78, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x78, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x29, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x67, 0x67, 0x53, 0x69, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x36,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x78, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0xb0, 0x03,
	0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x72, 0x64, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x78,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x72, 0x64, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x54, 0x78, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x54, 0x78, 0x73, 0x12, 0x12, 0x0a, 0x05, 0x6f, 0x5f, 0x70, 0x5f, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x03, 0x6f, 0x50, 0x54, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x73,
	0x69, 0x67, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x68, 0x6f, 0x74, 0x73, 0x74, 0x75, 0x66, 0x66, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x67,
	0x67, 0x53, 0x69, 0x67, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x63, 0x5f, 0x69, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x72, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x02, 0x63, 0x49, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x5f, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x72, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x02, 0x63, 0x43, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x5f, 0x74, 0x5f, 0x78, 0x5f, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x72, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x54, 0x78, 0x73, 0x52, 0x04, 0x63, 0x54, 0x58, 0x53, 0x12, 0x3b, 0x0a, 0x0d, 0x63,
	0x5f, 0x74, 0x5f, 0x78, 0x5f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x72, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x78, 0x73, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x09, 0x63,
	0x54, 0x58, 0x53, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x36, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x72, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x78,
	0x73, 0x52, 0x0d, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x68, 0x61, 0x72, 0x64, 0x54, 0x78, 0x73,
	0x22, 0x17, 0x0a, 0x03, 0x54, 0x78, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x74, 0x78, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x11, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x68, 0x6f, 0x74, 0x73,
	0x74, 0x75, 0x66, 0x66, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x07, 0x61, 0x67, 0x67, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x72, 0x69, 0x65, 0x66, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x72, 0x69, 0x65, 0x66, 0x12, 0x49, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6f,
	0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x72, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x72, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x78,
	0x73, 0x52, 0x06, 0x4f, 0x50, 0x54, 0x54, 0x78, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x74, 0x78, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x72, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x78, 0x73, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0e,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x78, 0x73, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x1a,
	0x5a, 0x18, 0x65, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x75, 0x72, 0x64, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_urd_types_block_proto_rawDescOnce sync.Once
	file_proto_urd_types_block_proto_rawDescData = file_proto_urd_types_block_proto_rawDesc
)

func file_proto_urd_types_block_proto_rawDescGZIP() []byte {
	file_proto_urd_types_block_proto_rawDescOnce.Do(func() {
		file_proto_urd_types_block_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_urd_types_block_proto_rawDescData)
	})
	return file_proto_urd_types_block_proto_rawDescData
}

var file_proto_urd_types_block_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_urd_types_block_proto_goTypes = []interface{}{
	(*CommitIntention)(nil),         // 0: urd.types.CommitIntention
	(*ProofOfIntention)(nil),        // 1: urd.types.ProofOfIntention
	(*CommitCertificateCore)(nil),   // 2: urd.types.CommitCertificateCore
	(*CommitCertificate)(nil),       // 3: urd.types.CommitCertificate
	(*OutputTxsProof)(nil),          // 4: urd.types.OutputTxsProof
	(*Header)(nil),                  // 5: urd.types.Header
	(*Block)(nil),                   // 6: urd.types.Block
	(*Txs)(nil),                     // 7: urd.types.Txs
	(*CrossShardMessage)(nil),       // 8: urd.types.CrossShardMessage
	(*hotstuff.AggregatedVote)(nil), // 9: core.hotstuff.AggregatedVote
	(*merkle.Proof)(nil),            // 10: crypto.merkle.Proof
	(*third_party.Timestamp)(nil),   // 11: google.protobuf.Timestamp
}
var file_proto_urd_types_block_proto_depIdxs = []int32{
	9,  // 0: urd.types.CommitIntention.aggregated_signatures:type_name -> core.hotstuff.AggregatedVote
	10, // 1: urd.types.ProofOfIntention.intention_hash_proof:type_name -> crypto.merkle.Proof
	1,  // 2: urd.types.CommitCertificateCore.m_k_proof:type_name -> urd.types.ProofOfIntention
	2,  // 3: urd.types.CommitCertificate.cores:type_name -> urd.types.CommitCertificateCore
	10, // 4: urd.types.OutputTxsProof.block_proof:type_name -> crypto.merkle.Proof
	10, // 5: urd.types.OutputTxsProof.OPT_proof:type_name -> crypto.merkle.Proof
	11, // 6: urd.types.Header.Time:type_name -> google.protobuf.Timestamp
	5,  // 7: urd.types.Block.header:type_name -> urd.types.Header
	7,  // 8: urd.types.Block.prepare_txs:type_name -> urd.types.Txs
	9,  // 9: urd.types.Block.agg_sig_vote:type_name -> core.hotstuff.AggregatedVote
	0,  // 10: urd.types.Block.c_i:type_name -> urd.types.CommitIntention
	3,  // 11: urd.types.Block.c_c:type_name -> urd.types.CommitCertificate
	7,  // 12: urd.types.Block.c_t_x_s:type_name -> urd.types.Txs
	4,  // 13: urd.types.Block.c_t_x_s_proof:type_name -> urd.types.OutputTxsProof
	7,  // 14: urd.types.Block.cross_shard_txs:type_name -> urd.types.Txs
	9,  // 15: urd.types.CrossShardMessage.agg_vote:type_name -> core.hotstuff.AggregatedVote
	1,  // 16: urd.types.CrossShardMessage.proof_of_intention:type_name -> urd.types.ProofOfIntention
	7,  // 17: urd.types.CrossShardMessage.OPT_txs:type_name -> urd.types.Txs
	4,  // 18: urd.types.CrossShardMessage.output_txs_proof:type_name -> urd.types.OutputTxsProof
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_proto_urd_types_block_proto_init() }
func file_proto_urd_types_block_proto_init() {
	if File_proto_urd_types_block_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_urd_types_block_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitIntention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_urd_types_block_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofOfIntention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_urd_types_block_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitCertificateCore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_urd_types_block_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_urd_types_block_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputTxsProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_urd_types_block_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_urd_types_block_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_urd_types_block_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Txs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_urd_types_block_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossShardMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_urd_types_block_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_urd_types_block_proto_goTypes,
		DependencyIndexes: file_proto_urd_types_block_proto_depIdxs,
		MessageInfos:      file_proto_urd_types_block_proto_msgTypes,
	}.Build()
	File_proto_urd_types_block_proto = out.File
	file_proto_urd_types_block_proto_rawDesc = nil
	file_proto_urd_types_block_proto_goTypes = nil
	file_proto_urd_types_block_proto_depIdxs = nil
}
